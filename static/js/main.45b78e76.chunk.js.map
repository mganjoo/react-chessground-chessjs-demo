{"version":3,"sources":["Chessground.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chessground","children","shapes","onDraw","chessgroundProps","el","useRef","useState","ground","setGround","useEffect","current","NativeChessground","destroy","set","Object","assign","drawable","onChange","setShapes","ref","ChessReq","require","toDests","chess","dests","Map","game_over","SQUARES","forEach","square","moves","verbose","length","map","move","to","toColor","turn","App","fen","setFen","orientation","setOrientation","lastMove","setLastMove","showPromotionDialog","setShowPromotionDialog","pendingMove","setPendingMove","updateBoard","promotion","from","handlePromotion","piece","className","turnColor","check","in_check","movable","free","color","events","after","orig","dest","some","flags","indexOf","premovable","enabled","newShapes","viewOnly","onClick","reset","undefined","in_stalemate","in_checkmate","winningSide","in_threefold_repetition","insufficient_material","in_draw","gameStatus","classNames","hidden","aria-labelledby","role","aria-modal","aria-hidden","id","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45b78e76.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\nimport { Chessground as NativeChessground } from \"chessground\"\nimport \"./Chessground.css\"\nimport { Api as ChessgroundApi } from \"chessground/api\"\nimport { DrawShape } from \"chessground/draw\"\nimport { Config } from \"chessground/config\"\n\ntype ChessgroundProps = Omit<Config, \"drawable\"> & {\n  onDraw?: (shapes: DrawShape[]) => void\n  shapes?: DrawShape[]\n}\n\nconst Chessground: React.FC<ChessgroundProps> = ({\n  children,\n  shapes,\n  onDraw,\n  ...chessgroundProps\n}) => {\n  const el = useRef<HTMLDivElement>(null)\n  const [ground, setGround] = useState<ChessgroundApi>()\n\n  // Initialize and destory on mount/unmount only\n  useEffect(() => {\n    if (el.current && !ground) {\n      setGround(NativeChessground(el.current, {}))\n    }\n    return () => {\n      if (ground) {\n        ground.destroy()\n      }\n    }\n  }, [ground])\n\n  // Update props after initialization is complete\n  useEffect(() => {\n    if (ground) {\n      ground.set(\n        Object.assign(chessgroundProps, { drawable: { onChange: onDraw } })\n      )\n      if (shapes) {\n        ground.setShapes(shapes)\n      }\n    }\n  }, [ground, chessgroundProps, onDraw, shapes])\n\n  return <div ref={el}>{children}</div>\n}\n\nexport default Chessground\n","import React, { useState } from \"react\"\nimport Chessground from \"./Chessground\"\nimport { ChessInstance, PieceType, Square } from \"chess.js\"\nimport * as cg from \"chessground/types\"\nimport { DrawShape } from \"chessground/draw\"\nimport classNames from \"classnames\"\n\nconst ChessReq = require(\"chess.js\")\n\ntype PromotablePiece = Exclude<PieceType, \"p\" | \"k\">\n\nfunction toDests(chess: ChessInstance): Map<cg.Key, cg.Key[]> {\n  const dests = new Map()\n  if (!chess.game_over()) {\n    chess.SQUARES.forEach((square) => {\n      const moves = chess.moves({ square: square, verbose: true })\n      if (moves.length) {\n        dests.set(\n          square,\n          moves.map((move) => move.to)\n        )\n      }\n    })\n  }\n  return dests\n}\n\nfunction toColor(chess: ChessInstance): cg.Color {\n  return chess.turn() === \"w\" ? \"white\" : \"black\"\n}\n\nconst App: React.FC = () => {\n  const [chess] = useState<ChessInstance>(new ChessReq())\n  const [fen, setFen] = useState(chess.fen())\n  const [orientation, setOrientation] = useState<cg.Color>(\"white\")\n  const [lastMove, setLastMove] = useState<cg.Key[]>()\n  const [shapes, setShapes] = useState<DrawShape[]>()\n  const [showPromotionDialog, setShowPromotionDialog] = useState(false)\n  const [pendingMove, setPendingMove] = useState<[cg.Key, cg.Key]>()\n\n  const updateBoard = (\n    move?: [cg.Key, cg.Key],\n    promotion?: PromotablePiece\n  ) => {\n    if (move) {\n      chess.move({\n        from: move[0] as Square,\n        to: move[1] as Square,\n        promotion: promotion,\n      })\n    }\n    setFen(chess.fen())\n    setLastMove(move)\n  }\n\n  const handleMove: (orig: cg.Key, dest: cg.Key) => void = (orig, dest) => {\n    const isPromotion = chess\n      .moves({ verbose: true })\n      .some((move) => move.flags.indexOf(\"p\") !== -1 && move.from === orig)\n\n    if (isPromotion) {\n      setPendingMove([orig, dest])\n      setShowPromotionDialog(true)\n    } else {\n      updateBoard([orig, dest])\n    }\n  }\n\n  const handleDraw: (newShapes: DrawShape[]) => void = (newShapes) => {\n    setShapes(newShapes)\n  }\n\n  const handlePromotion: (piece: PromotablePiece) => void = (piece) => {\n    updateBoard(pendingMove, piece)\n    setShowPromotionDialog(false)\n  }\n\n  const reset = () => {\n    chess.reset()\n    setShapes(undefined)\n    updateBoard()\n  }\n\n  const gameStatus: () => string = () => {\n    if (chess.in_stalemate()) {\n      return \"Stalemate\"\n    } else if (chess.in_checkmate()) {\n      const winningSide = chess.turn() === \"w\" ? \"Black\" : \"White\"\n      return `Checkmate: ${winningSide} wins`\n    } else if (chess.in_threefold_repetition()) {\n      return \"Draw by threefold repetition\"\n    } else if (chess.insufficient_material()) {\n      return \"Draw by insufficient material\"\n    } else if (chess.in_draw()) {\n      return \"Draw\"\n    } else {\n      return \"\"\n    }\n  }\n\n  return (\n    <main className=\"max-w-xl mx-auto py-6 px-4\">\n      <Chessground\n        fen={fen}\n        orientation={orientation}\n        turnColor={toColor(chess)}\n        lastMove={lastMove}\n        check={chess.in_check()}\n        movable={{\n          free: false,\n          color: toColor(chess),\n          dests: toDests(chess),\n          events: { after: handleMove },\n        }}\n        premovable={{ enabled: false }}\n        onDraw={handleDraw}\n        shapes={shapes}\n        viewOnly={chess.game_over()}\n      />\n      <div className=\"flex flex-auto space-x-2 py-2 justify-center\">\n        <button\n          className=\"c-button\"\n          onClick={() =>\n            setOrientation(orientation === \"white\" ? \"black\" : \"white\")\n          }\n        >\n          Flip\n        </button>\n        <button className=\"c-button\" onClick={reset}>\n          Reset\n        </button>\n      </div>\n      {chess.game_over() && (\n        <div className=\"text-center py-2\">{gameStatus()}</div>\n      )}\n      <div\n        className={classNames(\"fixed z-10 inset-0 overflow-y-auto\", {\n          hidden: !showPromotionDialog,\n        })}\n        aria-labelledby=\"modal-title\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n      >\n        <div className=\"flex items-start justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n          <div\n            className=\"fixed inset-0 bg-gray-500 bg-opacity-95 transition-opacity\"\n            aria-hidden=\"true\"\n          ></div>\n          <div className=\"inline-block align-middle bg-white rounded-lg text-left overflow-hidden my-4 shadow-xl transform transition-all sm:my-8 sm:max-w-lg sm:w-full\">\n            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n              <div className=\"sm:flex sm:items-center sm:justify-center mb-3\">\n                <div className=\"mt-3 text-center sm:mt-0\">\n                  <h3\n                    className=\"text-xl leading-6 font-medium text-gray-900\"\n                    id=\"modal-title\"\n                  >\n                    Promote piece\n                  </h3>\n                </div>\n              </div>\n              <div className=\"px-2 py-3 space-y-2 sm:flex sm:flex-row sm:space-x-2 sm:space-y-0 sm:justify-center\">\n                <button\n                  type=\"button\"\n                  className=\"c-button\"\n                  onClick={() => handlePromotion(\"q\")}\n                >\n                  Queen\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"c-button\"\n                  onClick={() => handlePromotion(\"r\")}\n                >\n                  Rook\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"c-button\"\n                  onClick={() => handlePromotion(\"b\")}\n                >\n                  Bishop\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"c-button\"\n                  onClick={() => handlePromotion(\"n\")}\n                >\n                  Knight\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}